import { DummyContract } from '../contracts';
import { BigNumber } from 'bignumber.js';

import { W3, TestRPC, toBN, testAccounts, testPrivateKeys } from '../';
import * as Ganache from 'ganache-core';


// Replace w3 ctor to test on a real testnet, not TestRPC/ganache
// let w3 = new W3(new W3.providers.HttpProvider('http://localhost:8544'));
let w3: W3 = new W3(
    Ganache.provider( {
        network_id: 314,
        accounts: [
            {
                balance: '0xD3C21BCECCEDA1000000',
                secretKey: '0x' + testPrivateKeys[0]
            },
            {
                balance: '0xD3C21BCECCEDA1000000',
                secretKey: '0x' + testPrivateKeys[1]
            },
            {
                balance: '0xD3C21BCECCEDA1000000',
                secretKey: '0x' + testPrivateKeys[2]
            }
        ]
    } as Ganache.GanacheOpts) as any
);

// let address = W3.EthUtils.bufferToHex(W3.EthUtils.privateToAddress(new Buffer(testPrivateKeys[0], 'hex')));
// console.log('CALCULATED ADDRESS', address);

W3.default = w3;
let testrpc = new TestRPC(w3);

let accounts: string[];
// testnet account with some ether
let activeAccount = testAccounts[0];

let txDeployParams = W3.TX.txParamsDefaultDeploy(activeAccount);
let txSendParams = W3.TX.txParamsDefaultSend(activeAccount);

beforeAll(async () => {

    if (!(await w3.isTestRPC)) {
        console.log('NOT ON TESTRPC');
        await w3.unlockAccount(activeAccount, 'Rinkeby', 150000);
    } else {
        accounts = await w3.accounts;
        activeAccount = accounts[0];
        txDeployParams = W3.TX.txParamsDefaultDeploy(activeAccount);
        txSendParams = W3.TX.txParamsDefaultSend(activeAccount);
        console.log('ACTIVE ACCOUNT', activeAccount);
    }

    w3.defaultAccount = activeAccount;
});

it('should have initial private value from deployer', async function() {
    let instance = await dummyContract.deployed();

    // typed contract could be initiated with an instance supplied by Truffle
    let dummy = await DummyContract.at(instance);

    console.log(dummy);

    console.log('ADDRESS: ', dummy.address);
    let pr = await dummy.getPrivate();

    assert.equal(pr, 123, '123 wasn\'t in the private value');

    let response = await dummy.setPrivate(new BigNumber(123456));
    console.log('REPONSE: ', response);
    console.log('LOGS: ', response.receipt.logs);
    console.log('ARGS: ', response.logs[0].args);

    pr = await dummy.getPrivate();
    assert.equal(pr, 123456, '123456 wasn\'t in the private value');

    // this is how to get data for multisig submitTransaction
    // https://github.com/trufflesuite/truffle-contract/issues/10
    let data = (await dummy.instance).setPrivate.request(new BigNumber(255));
    console.log('DATA: ', data);

    // and in strongly-typed way:
    let data2 = await dummy.setPrivate.data(new BigNumber(255));
    console.log('DATA2: ', data2);
    assert.equal(
        data.params[0].data,
        data2,
        'Data from Soltsice should be the same as from untyped call'
    );

    pr = await dummy.getPrivate();
    assert.equal(pr, 123456, '123456 wasn\'t in the private value');
});

it('should have initial public value from deployer', async function() {
    let dummy = await DummyContract.at(await dummyContract.deployed());
    let value = await dummy.getPublic();
    assert.equal(value, 456, '456 wasn\'t in the public value');
});
